Pour rajouter une nouvelle action redux et une variable dans le store : 

- actions : 
 - dans actions/types.js 
    declarer et exporter le nom de la nouvelle action 
    export const UPDATE_USER = "UPDATE_USER"; 
    export const LOGIN = "LOGIN"; 
 - créer le fichier dans /actions/  
    ex /actions/user_actions.js
    avec le contenu : 

      // on importe le nom des actions dont on a besoin (l'utilisation des constantes evite les typo)
      import { LOGIN, USER_UPDATE } from "language_therapy/src/redux/types";
      /* l'action ne fait pas grand chose en réalité  
        on l'appel depuis n'importe quel composant et elle ne fait que retourner un objet :
        { 
          payload : user // données à utiliser dans redux, pas toujours obligatoire comme pour logout
          type :  LOGIN // nom de l'action à effectuer
        }
      */

      export const action_login = (user) => {
        return { payload: user, type: LOGIN };
      };

      export const action_userupdate = (user) => {
        return { payload: user, type: USER_UPDATE };
      };
  - dans /actions/index.js
    rajouter export * from "./user_actions";


- reducers : il décrit comment une action modifie le state stocké sur le téléphone pour en faire un nouveau
  il ne faut jamais jamais modifier le state courant, tjrs en retourner un nouveau (utilise l'adresse en mémoire pour detecter les changements) ou le même si aucune modification
  - créer le fichier dans /reducers/ 
  ex /reducers/user_reducer.js
  et contenu 

  // on import aussi les constantes avec le nom des actions
  import { LOGIN, LOGOUT, USER_UPDATE } from "language_therapy/src/redux/types";

  export default function (state = null, action) {
    // switch sur le type(nom) de l'action recue   
    switch (action.type) {
      // si login ou update on renvoi un nouvelle état avec le contenu de use recu en parametre dans action.payload
      case LOGIN: 
      case USER_UPDATE:
        return { ...action.payload };
      case LOGOUT:
        return null; // on retourne null dans on veut l'éffacer
      default:
        return state;
    }
  }

  - index.js
  import user from "./user_reducer";
  export default {
      user, ....
  }


- le store est déja configurer. 




pour appeler une action depuis un composant : 

      // les actions seront disponibles dans this.props. 
      import * as actions from "language_therapy/src/redux/actions";
      class MonComposant extends React.Component {
        ...
        this.props.action_login(user);
        ...
      }
      export default connect(null, actions)(MonComposant);

maintenant si on veut récupèrer automatiquement les nouveaux états du store à chaque changement de store 

      import { connect } from "react-redux";
      import * as actions from "language_therapy/src/redux/actions";
      class MonComposant extends React.Component {

        constructor (props) {
          super(props);
          this.state = {
            user : this.props.user || null 
          };
        }


        componentWillReceiveProps(nextProps) {
          this.setState({ user: nextProps.user });           
        }
        ...
        this.props.action_login(user);
        ...

      }

      // cette fonction est appelé à chaque changement d'état du store 
      // data contient tout le store donc il faut récupèrer uniquement les attributs qui nous interesse
      // componentWillReceiveProps(nextprops) est appelé quand de nouvelles données sont recues
      function mapToStateProps(data) {
        const { user } = data;
        return {
          user
        };
      }
      export default connect(mapToStateProps, actions)(MonComposant);




